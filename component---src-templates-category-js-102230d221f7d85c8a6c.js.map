{"version":3,"sources":["webpack:///./src/templates/category.js","webpack:///./src/components/PostListing.js"],"names":["CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","title","className","Component","pageQuery","PostListing","getPostList","map","postEdge","path","node","fields","slug","tags","frontmatter","thumbnail","date","excerpt","timeToRead","categories","simple","showNext","postList","post","childImageSharp","fixed","popular","includes","formatDate","newest","moment","subtract","to","key","style","margin"],"mappings":"8PAMqBA,E,gLACnBC,OAAA,WAAU,IACAC,EAAaC,KAAKC,MAAMC,YAAxBH,SACFI,EAAYH,KAAKC,MAAMG,KAAKC,kBAAkBC,MAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAK,sBAAwBR,EAAxB,MACb,yBAAKS,UAAU,aACb,4BAAKT,GACL,kBAAC,IAAD,CAAaI,UAAWA,O,GAVYM,aAiBjCC,EAAS,c,iMCjBDC,E,wLACnBC,YAAA,WAcE,OAbsBZ,KAAKC,MAAnBE,UACmBU,KAAI,SAACC,GAC9B,MAAO,CACLC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,UAAWP,EAASE,KAAKI,YAAYC,UACrCd,MAAOO,EAASE,KAAKI,YAAYb,MACjCe,KAAMR,EAASE,KAAKC,OAAOK,KAC3BC,QAAST,EAASE,KAAKO,QACvBC,WAAYV,EAASE,KAAKQ,WAC1BC,WAAYX,EAASE,KAAKI,YAAYK,gB,EAM5C3B,OAAA,WAAU,IAAD,EACsBE,KAAKC,MAA1ByB,EADD,EACCA,OAAQC,EADT,EACSA,SACVC,EAAW5B,KAAKY,cAEtB,OACE,6BAASJ,UAAS,UAAWkB,EAAS,SAAW,KAC9CE,EAASf,KAAI,SAACgB,GACb,IAAIR,EACAQ,EAAKR,YACPA,EAAYQ,EAAKR,UAAUS,gBAAgBC,OAG7C,IAAMC,EAAUH,EAAKJ,WAAWQ,SAAS,WACnCX,EAAOY,YAAWL,EAAKP,MACvBa,EAASC,IAAOP,EAAKP,MAAQc,MAASC,SAAS,EAAG,UAExD,OACE,kBAAC,OAAD,CAAMC,GAAIT,EAAKd,KAAMwB,IAAKV,EAAKtB,OAC7B,yBAAKC,UAAU,QACZa,EAAY,kBAAC,IAAD,CAAKU,MAAOV,IAAgB,8BACzC,yBAAKb,UAAU,kBACb,4BAAKqB,EAAKtB,QACRmB,GAAU,yBAAKlB,UAAU,WAAWc,IAEvCa,GACC,yBAAK3B,UAAU,SACb,yBAAKA,UAAU,OAAf,SAGHwB,IAAYN,IAAWS,GACtB,yBAAK3B,UAAU,SACb,yBAAKA,UAAU,WAAf,iBAOXmB,GACC,kBAAC,OAAD,CAAMW,GAAG,QAAQ9B,UAAU,WAAWgC,MAAO,CAAEC,OAAQ,cAAvD,Q,GAzD+BhC","file":"component---src-templates-category-js-102230d221f7d85c8a6c.js","sourcesContent":["import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\n\nexport default class CategoryTemplate extends Component {\n  render() {\n    const { category } = this.props.pageContext\n    const postEdges = this.props.data.allMarkdownRemark.edges\n\n    return (\n      <Layout>\n        <Helmet title={`Posts in category \"${category}\"`} />\n        <div className=\"container\">\n          <h1>{category}</h1>\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            thumbnail {\n              childImageSharp {\n                fixed(width: 150, height: 150) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n            date\n            template\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { Component } from \"react\";\nimport { Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport moment from \"moment\";\nimport { formatDate } from \"../utils/global\";\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props;\n    const postList = postEdges.map((postEdge) => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        thumbnail: postEdge.node.frontmatter.thumbnail,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        categories: postEdge.node.frontmatter.categories,\n      };\n    });\n    return postList;\n  }\n\n  render() {\n    const { simple, showNext } = this.props;\n    const postList = this.getPostList();\n\n    return (\n      <section className={`posts ${simple ? \"simple\" : \"\"}`}>\n        {postList.map((post) => {\n          let thumbnail;\n          if (post.thumbnail) {\n            thumbnail = post.thumbnail.childImageSharp.fixed;\n          }\n\n          const popular = post.categories.includes(\"Popular\");\n          const date = formatDate(post.date);\n          const newest = moment(post.date) > moment().subtract(1, \"months\");\n\n          return (\n            <Link to={post.path} key={post.title}>\n              <div className=\"each\">\n                {thumbnail ? <Img fixed={thumbnail} /> : <div />}\n                <div className=\"each-list-item\">\n                  <h2>{post.title}</h2>\n                  {!simple && <div className=\"excerpt\">{date}</div>}\n                </div>\n                {newest && (\n                  <div className=\"alert\">\n                    <div className=\"new\">New!</div>\n                  </div>\n                )}\n                {popular && !simple && !newest && (\n                  <div className=\"alert\">\n                    <div className=\"popular\">Popular</div>\n                  </div>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n        {showNext && (\n          <Link to=\"/blog\" className=\"view-all\" style={{ margin: \"10px 50px\" }}>\n            ðŸ˜ƒ\n          </Link>\n        )}\n      </section>\n    );\n  }\n}\n"],"sourceRoot":""}